name: Continous Integration

on:
  pull_request:
    branches: ['**']
  push:
    branches-ignore:
      - main

env:
  LOCAL_TAG: dwolla/jenkins-agent-docker:local

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Test
    runs-on: windows-2019
    strategy:
      max-parallel: 2
      matrix:
        jdk: [8, 11]
        include:
        - jdk: 8
          dockerfile: 8/windows/nanoserver-1809/Dockerfile
          tag_suffix: nanoserver-1809-amd64
          context: '.'
        - jdk: 11
          dockerfile: 11/windows/nanoserver-1809/Dockerfile
          tag_suffix: nanoserver-1809-amd64
          context: '.'
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build Docker image
        id: build_docker_image
        run: |
          docker build -t ${{ env.LOCAL_TAG }} -f ${{ matrix.dockerfile }} ${{ matrix.context }}

      - name: Get versions
        uses: actions/github-script@v6
        id: get-versions
        with:
          script: |
            const fs = require('fs')

            const dockerfile = fs.readFileSync(`${process.env.GITHUB_WORKSPACE}/${{ matrix.dockerfile }}`, 'utf8').trim()
            const docker_from_instruction_regex = /^(?:FROM\s+)(?<repository>[\w.\-_]+((?:\:\d+|)(?=\/[a-z0-9._-]+\/[a-z0-9._-]+))|)(?:\/|)(?<image>[a-z0-9.\-_]+(?:\/[a-z0-9.\-_]+|))(:(?<tag>[\w.\-_]{1,127})|)$/gmi
            const base_image_tag = [...dockerfile.matchAll(docker_from_instruction_regex)].at(-1).groups.tag;

            const docker_tag_regex = /^(?<version>\d+\.\d+-\d+)-(?<jdk>jdk\d+)-(?<base>.*$)/i
            const tag_versions = base_image_tag.match(docker_tag_regex)

            const revision = fs.readFileSync(`${process.env.GITHUB_WORKSPACE}/revision.txt`)

            core.setOutput('git-tag', `v${tag_versions.groups.version}-${revision}`)
            core.setOutput('docker-tag', `dwolla/jenkins-agent-docker:${tag_versions.groups.version}-${revision}-${tag_versions.groups.jdk}-${{ matrix.tag_suffix }}`)

      - name: Check if Docker tag exists
        run: |
          if (docker manifest inspect ${{ steps.get-versions.outputs.docker-tag }})
          {
            Write-Output "Docker tag already exists: ${{ steps.get-versions.outputs.docker-tag }}. Please increment revision.txt."
            exit 1
          }
          else
          {
            Write-Output "Docker tag ${{ steps.get-versions.outputs.docker-tag }} does not exist."
            exit 0
          }

      - name: Check if git tag exists
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const resp = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/${{ needs.build.outputs.git-tag }}',
              });
              return core.setFailed("Git tag already exists: ${{ needs.build.outputs.git-tag }}. Please increment revision.txt.");
            } catch (error) {
                if (error.status === 404) {
                  core.info("Git tag ${{ needs.build.outputs.git-tag }} does not exist.")
                } else {
                  throw error;
                }
            }

            